function [D, X, A, B, updated, niter, i] = dictionary_learning(U, CODE_LEN,...
                                    tol, max_iter, dict_iter)
    % DICTIONARY_LEARNING implementation of global algorithm
    %   
    %   param U (matrix): Matrix generated by ascii_to_data_matrix()
    % 
    %   param D_init (matrix): Initialization of dictionary
    % 
    %   param tol (float): tolerance for Frobenius norm convergence of D
    %
    %   param max_iter (int): Max no. of iterations in global algo  
    % 
    %   param dict_iter (int) Max no. of iterations in dictionary_update()
    %
    %   Perform dictionary learning, alternating between LASSO 
    %   for sparse coding and block coordinate descent for regression.
    %
    D_init = init_dict(U, CODE_LEN);
    [D, D_prev, X, A, B, updated, niter] = dictionary_learning_util(U, ...
                                                D_init, tol, dict_iter);
    
    i = 0;
    while norm(D - D_prev, "fro") > tol && i < max_iter
     [D, D_prev, X, A, B, updated, niter] = dictionary_learning_util(U, ...
                                                D, tol, dict_iter);
     i = i + 1;
    end    
end

