function [D, X, A, B, updated, niter, i] = dictionary_learning(U, CODE_LEN,...
                                    lambda, tol, max_iter, dict_iter, data, V)
    % DICTIONARY_LEARNING implementation of global algorithm
    %   
    %   param U (matrix): Matrix generated by ascii_to_data_matrix()
    % 
    %   param CODE_LEN (int): Length of sparse code vectors
    %
    %   param lambda (float): Fixed parameter used by LASSO
    % 
    %   param tol (float): tolerance for Frobenius norm convergence of D
    %
    %   param max_iter (int): Max no. of iterations in global algo  
    % 
    %   param dict_iter (int) Max no. of iterations in dictionary_update()
    %
    %   Perform dictionary learning, alternating between LASSO 
    %   for sparse coding and block coordinate descent for regression.
    %
  
    D_init = init_dict(U, CODE_LEN);
    
    [D, D_prev, X, A, B, updated, niter] = dictionary_learning_util(U, D_init,...
                                                lambda, tol, dict_iter);
    SUBSET_LEN = length(data(1,:));
    BLOCK_LEN = sqrt(length(V(:,1)));
    
    reconstruct = patches_to_original(V*D*X, BLOCK_LEN, SUBSET_LEN, SUBSET_LEN);
    diff = norm(data - reconstruct);
    fprintf("norm(U - DX) = %.3e after %d DL iterations.\n", diff, 1);
    rel_diff = diff/norm(data);
    fprintf("relative error = %.4e after %d DL iterations.\n", rel_diff, 1);
    
    i = 1;
    while norm(D - D_prev, "fro") > tol && i < max_iter
     i = i + 1;                                       
     [D, D_prev, X, A, B, updated, niter] = dictionary_learning_util(U, D, ...
                                                lambda, tol, dict_iter);
                                            
     reconstruct = patches_to_original(V*D*X, BLOCK_LEN, SUBSET_LEN, SUBSET_LEN);
     diff = norm(data - reconstruct);
     fprintf("norm(U - DX) = %.3e after %d DL iterations.\n", diff, i);
     rel_diff = diff/norm(data);
     fprintf("relative error = %.4e after %d DL iterations.\n", rel_diff, i);
    end  
    
end

