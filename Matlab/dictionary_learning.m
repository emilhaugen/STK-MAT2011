function [D, X, A, B] = dictionary_learning(U, D_init, tol, max_iter)
    %DICTIONARY LEARNING global implementation of DL
    %   
    %   param U (matrix): Matrix generated by ascii_to_data_matrix()
    % 
    %   param D_prev (matrix): Previous version of dictionary
    % 
    %   param tol (float): tolerance for Frobenius norm convergence of D
    %
    %   param max_iter (int): Maximum no. of iterations   
    % 
    %   Perform dictionary learning, alternating between LASSO 
    %   for sparse coding and block coordinate descent for regression.
    %
    
    Udim = size(U);
    m = Udim(1);
    T = Udim(2);
    
    Ddim = size(D_init); %same no. of rows as U, CODE_LEN cols
    CODE_LEN = Ddim(2);
    
    D = D_init;
    D_prev = D - D; %zero matrix of same dim. as D 
    X = zeros(CODE_LEN, T);
    
    i = 0;
    while norm(D - D_prev, "fro") > tol && i < max_iter
        D_prev = D;
        X = lasso_sparse_coding(U, D, X, T);
        A = sum_of_outer_prods(X, X);
        B = sum_of_outer_prods(U, X);
        D = dictionary_update(D, A, B, tol, max_iter);
        i = i + 1;
    end    
    "Total "
    i + 1
    "DL iters"
end

