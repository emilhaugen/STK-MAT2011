function [D, X, A, B, updated, niter, i] = dictionary_learning(U, CODE_LEN,...
                                    lambda, tol, max_iter, dict_iter)
    % DICTIONARY_LEARNING implementation of global algorithm
    %   
    %   param U (matrix): Matrix generated by ascii_to_data_matrix()
    % 
    %   param CODE_LEN (int): Length of sparse code vectors
    %
    %   param lambda (float): Fixed parameter used by LASSO
    % 
    %   param tol (float): tolerance for Frobenius norm convergence of D
    %
    %   param max_iter (int): Max no. of iterations in global algo  
    % 
    %   param dict_iter (int) Max no. of iterations in dictionary_update()
    %
    %   Perform dictionary learning, alternating between LASSO 
    %   for sparse coding and block coordinate descent for regression.
    %
    D_init = init_dict(U, CODE_LEN);
    
    [D, D_prev, X, A, B, updated, niter] = dictionary_learning_util(U, D_init,...
                                                lambda, tol, dict_iter, 1);
    i = 2;
    % iterate while estimate of orig. data improves
    while norm(U - D_prev*X, "fro") - norm(U - D*X, "fro") < 1e-10 && i < max_iter
     [D, D_prev, X, A, B, updated, niter] = dictionary_learning_util(U, D, ...
                                                lambda, tol, dict_iter, i);
     i = i + 1;                                       
    end  
    
end

