function [D, X, A, B, errors, i] = dictionary_learning(U, CODE_LEN,...
                                    lambda, tol, max_iter, dict_iter, ...
                                    data, V, SUBSET_LEN, BLOCK_LEN)
    % DICTIONARY_LEARNING implementation of global algorithm
    %   
    %   param U (matrix): Matrix generated by ascii_to_data_matrix()
    % 
    %   param CODE_LEN (int): Length of sparse code vectors
    %
    %   param lambda (float): Fixed parameter used by LASSO
    % 
    %   param tol (float): tolerance for Frobenius norm convergence of D
    %
    %   param max_iter (int): Max no. of iterations in global algo  
    % 
    %   param dict_iter (int) Max no. of iterations in dictionary_update()
    %
    %   Perform dictionary learning, alternating between LASSO 
    %   for sparse coding and block coordinate descent for regression.
    %
  
    D_init = init_dict(U, CODE_LEN);
    errors = zeros(max_iter, 1); % store errors
    
    i = 1; % first DL iteration
    [D, D_prev, X, A, B, error] = dictionary_learning_util(U, D_init,...
                lambda, tol, dict_iter, data, V, SUBSET_LEN, BLOCK_LEN, i);
    errors(i) = error;
    
    while norm(D - D_prev, "fro") > tol && i < max_iter
     i = i + 1;                                       
     [D, D_prev, X, A, B, error] = dictionary_learning_util(U, D,...
                lambda, tol, dict_iter, data, V, SUBSET_LEN, BLOCK_LEN, i);
     errors(i) = error;                                       
    end  
end

